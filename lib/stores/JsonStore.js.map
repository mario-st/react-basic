{"version":3,"sources":["stores/JsonStore.jsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;IAKP,YAAY;cAAZ,YAAY;;AAEd,aAFE,YAAY,CAED,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE;8BAF1C,YAAY;;sEAAZ,YAAY,aAGJ,UAAU,EAAE,QAAQ,EAAE,OAAO;KACtC;;iBAJC,YAAY;;4CAMO,GAAG,EAAE;AACtB,gBAAI,CAAC,IAAI,CAAC,MAAM,CAAE,GAAG,CAAE,EAAE;AACrB,oBAAI,CAAC,MAAM,CAAE,GAAG,CAAE,GAAG,IAAI,CAAC;aAC7B;SACJ;;;sCAEc,GAAG,EAAE;AAChB,mBAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAE,GAAG,CAAE,IAAI,IAAI,CAAC,CAAC;SACjD;;;gCAEQ,GAAG,EAAE,KAAK,EAAE;AACjB,uCAjBF,YAAY,yCAiBI,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;SAC7C;;;iCAES,GAAG,EAAE;AACX,uCArBF,YAAY,0CAqBK,yBAAU,GAAG,EAAE,UAAC,KAAK;uBAAK,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;aAAA,CAAC,EAAE;SACpE;;;gCAEQ,GAAG,EAAE;AACV,mBAAO,IAAI,CAAC,KAAK,CAAC,2BAzBpB,YAAY,yCAyBsB,GAAG,KAAK,MAAM,CAAC,CAAC;SACnD;;;iCAES,GAAG,EAAE,KAAK,EAAE;AAClB,gBAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAClC,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChB,gBAAI,CAAC,MAAM,CAAE,GAAG,CAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACzC,gBAAI,CAAC,OAAO,GAAS,IAAI,CAAC;SAC7B;;;uCAEe,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE;AAC/B,gBAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;AAC9B,gBAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAClC,gBAAI,KAAK,KAAK,GAAG,CAAE,KAAK,CAAE,EAAE;AACxB,mBAAG,CAAE,KAAK,CAAE,GAAS,KAAK,CAAC;AAC3B,oBAAI,CAAC,MAAM,CAAE,GAAG,CAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACzC,oBAAI,CAAC,OAAO,GAAS,IAAI,CAAC;aAC7B;SACJ;;;uCAEe,GAAG,EAAE,KAAK,EAAE;AACxB,gBAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;AAC9B,gBAAI,GAAG,GAAK,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AACpC,gBAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC/B,gBAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACZ,mBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACrB,oBAAI,CAAC,MAAM,CAAE,GAAG,CAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACzC,oBAAI,CAAC,OAAO,GAAS,IAAI,CAAC;aAC7B;SACJ;;;kCAEU;AACP,gBAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;AACpB,gBAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;;;WA3DC,YAAY;;;kBA+DH,YAAY","file":"stores/JsonStore.js","sourcesContent":["\"use strict\";\n\nimport Store from '../Store';\nimport mapValues from \"lodash/object/mapValues\";\n\nclass SessionStore extends Store {\n\n    constructor (dispatcher, register, storage) {\n        super(dispatcher, register, storage);\n    }\n\n    _createListIfNeeded (key) {\n        if (!this.stored[ key ]) {\n            this.stored[ key ] = \"[]\";\n        }\n    }\n\n    _getJsonArray (key) {\n        return JSON.parse(this.stored[ key ] || \"[]\");\n    }\n\n    setItem (key, value) {\n        super.setItem(key, JSON.stringify(value));\n    }\n\n    setItems (obj) {\n        super.setItems(mapValues(obj, (value) => JSON.stringify(value)));\n    }\n\n    getItem (key) {\n        return JSON.parse(super.getItem(key) || \"null\");\n    }\n\n    pushItem (key, value) {\n        let arr = this._getJsonArray(key);\n        arr.push(value);\n        this.stored[ key ] = JSON.stringify(arr);\n        this.changed       = true;\n    }\n\n    setIndexedItem (key, index, value) {\n        this._createListIfNeeded(key);\n        let arr = this._getJsonArray(key);\n        if (value !== arr[ index ]) {\n            arr[ index ]       = value;\n            this.stored[ key ] = JSON.stringify(arr);\n            this.changed       = true;\n        }\n    }\n\n    delIndexedItem (key, value) {\n        this._createListIfNeeded(key);\n        let arr   = this._getJsonArray(key);\n        let index = arr.indexOf(value);\n        if (index > -1) {\n            arr.splice(index, 1);\n            this.stored[ key ] = JSON.stringify(arr);\n            this.changed       = true;\n        }\n    }\n\n    cleanUp () {\n        this.stored.clear();\n        this.changed = true;\n    }\n\n}\n\nexport default SessionStore;"],"sourceRoot":"/source/"}